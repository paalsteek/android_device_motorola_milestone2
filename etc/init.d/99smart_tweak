#!/system/bin/sh
#
#Create by Cenculko!!!#
#Changed by Engle_Mars
#
DEBUG_ECHO=0

function debugEcho() {
	if [ $DEBUG_ECHO = 1 ]; then
		echo "LST Debug: $*";
	fi
}

function setSystemParam() {
  debugEcho "Call setSystemParam"
	#Minfree-
	echo "2048,3072,6144,15360,17920,20480" > /sys/module/lowmemorykiller/parameters/minfree

	#VM managment tweaks-
	echo "4096" > /proc/sys/vm/min_free_kbytes
	echo "0" > /proc/sys/vm/oom_kill_allocating_task;
	echo "0" > /proc/sys/vm/panic_on_oom;
	echo "0" > /proc/sys/vm/laptop_mode;
	echo "0" > /proc/sys/vm/swappiness
	echo "50" > /proc/sys/vm/vfs_cache_pressure
	echo "90" > /proc/sys/vm/dirty_ratio
	echo "70" > /proc/sys/vm/dirty_background_ratio

	#Misc kernel tweaks-
	echo "8" > /proc/sys/vm/page-cluster;
	echo "64000" > /proc/sys/kernel/msgmni;
	echo "64000" > /proc/sys/kernel/msgmax;
	echo "10" > /proc/sys/fs/lease-break-time;
	echo "500,512000,64,2048" > /proc/sys/kernel/sem;

	#Battery tweaks-
	echo "500" > /proc/sys/vm/dirty_expire_centisecs
	echo "1000" > /proc/sys/vm/dirty_writeback_centisecs

	#MicroSD card speed tweaks-
	#echo "2048" > /sys/devices/virtual/bdi/179:0/read_ahead_kb;

	#Ondemand governor tweaks-
	SAMPLING_RATE=$(busybox expr `cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_transition_latency` \* 750 / 1000)
	echo 95 > /sys/devices/system/cpu/cpufreq/ondemand/up_threshold
	echo $SAMPLING_RATE > /sys/devices/system/cpu/cpu0/cpufreq/ondemand/sampling_rate
}
#JuweÂ´s ram tweak-
function ramTweak() {

	if [ -e /sys/module/lowmemorykiller/parameters/adj ]; then
		echo "0,1,2,4,6,15" > /sys/module/lowmemorykiller/parameters/adj
	fi

	if [ -e /sys/module/lowmemorykiller/parameters/minfree ]; then
		echo "2560,4096,6144,12288,14336,18432" > /sys/module/lowmemorykiller/parameters/minfree
	fi

	if [ -e /proc/sys/vm/swappiness ]; then
		echo "10" > /prodebugEchoc/sys/vm/swappiness
	fi

	if [ -e /proc/sys/vm/vfs_cache_pressure ]; then
		echo "50" > /proc/sys/vm/vfs_cache_pressure
	fi

	if [ -e /proc/sys/vm/dirty_expire_centisecs ]; then
		echo "3000" > /proc/sys/vm/dirty_expire_centisecs
	fi

	if [ -e /proc/sys/vm/dirty_writeback_centisecs ]; then
		echo "500" > /proc/sys/vm/dirty_writeback_centisecs
	fi

	if [ -e /proc/sys/vm/dirty_ratio ]; then
		echo "22" > /proc/sys/vm/dirty_ratio
	fi

	if [ -e /proc/sys/vm/dirty_background_ratio ]; then
		echo "4" > /proc/sys/vm/dirty_background_ratio
	fi
}
# Pause and then loop until kswapd0 is found, which should be instant anyway
function waitForSystemStartup() {
	PNAME="kswapd0"
	SWAP_SLEEP_TIME=3;
	SWAP_NUMBER_OF_CHECKS=30;
	SWAP_CHECK_COUNT=0;
	SWAP_CHECK_COUNT_OK=0;
	while [ $SWAP_CHECK_COUNT -lt $SWAP_NUMBER_OF_CHECKS ]; 
	do
		if [ `pidof $PNAME` ]; then 
			renice 19 `pidof $PNAME`;
			SWAP_CHECK_COUNT=$SWAP_NUMBER_OF_CHECKS;
			SWAP_CHECK_COUNT_OK=1;
		else
			sleep $SWAP_SLEEP_TIME; 
		fi;
		SWAP_CHECK_COUNT=`expr $SWAP_CHECK_COUNT + 1`;
	done;

	if [ $SWAP_CHECK_COUNT_OK -lt 1 ]; then
		debugEcho "'kswapd0' expired after `expr $SWAP_CHECK_COUNT \* $SWAP_SLEEP_TIME` seconds";
	fi;

	debugEcho "$(date)\n" "kswapd0 found";
}

#Loopy smoothness tweak-
function processPriTweak() {
	for n in 1 2
	do
		USER_LAUNCHER="com.cyanogenmod.trebuchet"	# Change this to your launcher app

		PROCESS_NAME=("com.android.phone"
	                $USER_LAUNCHER
	                "com.android.systemui"
	                "android.process.acore"
	                "android.process.media");
		#Less number will higher running PRI.
		PROCESS_PRI=(-19
	               -18
	               -17
	               -5
	               10);
		PROCESS_ST=(0 0 0 0 0);

		# Total number of rechecks before ending 1st loop
		NUMBER_OF_CHECKS=60
		# Number of seconds between rechecking processes
		SLEEP_TIME=3
		# Must be edited to match the number of processes to be checked
		PROCESSES_TOTAL=${#PROCESS_NAME[*]};
		# Don't edit
		CHECK_COUNT=0
		# Don't edit
		P_CHECK=0

		if [ $n -eq "1" ]; then
			debugEcho "$(date)\n" "Initiate"
			waitForSystemStartup;
			#setSystemParam;
		fi;

		# Check briefly one more time
		if [ $n -eq "2" ]; then
			debugEcho "2nd loop"
			NUMBER_OF_CHECKS=6					# Editing not recommended
			SLEEP_TIME=5					# Editing not recommended
		fi;

		while [ $CHECK_COUNT -lt $NUMBER_OF_CHECKS ];
		do
			debugEcho "CHECK_COUNT is $CHECK_COUNT, NUMBER_OF_CHECKS is $NUMBER_OF_CHECKS";
			# Resident system apps
			INDEX=0;
			while [ $INDEX -lt $PROCESSES_TOTAL ];
			do
				PID=`pidof ${PROCESS_NAME[INDEX]}`;
				debugEcho "Set process '${PROCESS_NAME[INDEX]}:$PID' PRI to ${PROCESS_PRI[$INDEX]}";
				if [[ ( -n "$PID" ) && ( ${PROCESS_ST[$INDEX]} -eq "0" ) ]]; then 					
					NPRI=${PROCESS_PRI[$INDEX]};
					if [ $NPRI -lt 0 ]; then
						NPRI=`expr 0 - $NPRI`;
						renice -n $NPRI $PID;
					else
						renice $NPRI $PID;
					fi;
					PROCESS_ST[$INDEX]=1;
					debugEcho "Process '${PROCESS_NAME[INDEX]}' ST is ${PROCESS_ST[$INDEX]}";
					P_CHECK=`expr $P_CHECK + 1`; 
				fi;
				INDEX=`expr $INDEX + 1`
			done;

			debugEcho "P_CHECK is $P_CHECK, PROCESSES_TOTAL is $PROCESSES_TOTAL";

			# If all processes are done, loop can finish early
			if [ $P_CHECK -ge $PROCESSES_TOTAL ]; then 
				CHECK_COUNT=$NUMBER_OF_CHECKS;
			else
				sleep $SLEEP_TIME; 
			fi;

			CHECK_COUNT=`expr $CHECK_COUNT + 1`;
		done

		if [ $DEBUG_ECHO -eq "1" ]; then
			debugEcho "$(date)"
			INDEX=0;
			while [ $INDEX -lt $PROCESSES_TOTAL ];
			do
				debugEcho "${PROCESS_NAME[$INDEX]} expired after `expr $CHECK_COUNT \* $SLEEP_TIME` seconds";
				INDEX=`expr $INDEX + 1`;
			done;
			debugEcho " Checking complete"
	  fi;

	done

	debugEcho "Done"
}

processPriTweak;

